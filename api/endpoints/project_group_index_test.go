package api_test

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestProjectGroupIndex_Get(t *testing.T) {
	client, factory := Setup(t)
	defer TearDown(t)
	factory.SaveOrganization(factory.MakeOrganization())
	factory.SaveProject(factory.MakeProject())
	factory.SaveEventGroup(factory.MakeEventGroup())

	res, bodyStr, errs := client.Get("http://example.com:80/api/0/projects/acme-team/acme/issues/?query=is%3Aunresolved&limit=25&sort=date&statsPeriod=24h&shortIdLookup=1").End()
	assert.Nil(t, errs)
	assert.Equal(t, 200, res.StatusCode)
	assert.NotEmpty(t, bodyStr)
	// TODO diff full response
	// TODO shortId 1 -> "ACME-1"
	// TODO add annotations, assignedTo, count, hasSeen, isBookmarked, isSubscribed,
	//   metadata.title, stats.24h, shareId,
	//   userCount, type
	assert.JSONEq(t, `[
	    {
	        "id": "1",
	        "shareId": "322e31",
	        "shortId": "ACME-1",
	        "count": "1",
	        "userCount": 0,
	        "title": "This is a test message generated using `+"``raven test``"+` __main__ in <module>",
	        "culprit": "__main__ in <module>",
	        "permalink": "http://example.com:80/acme-team/acme/issues/1/",
	        "firstSeen": "2999-01-01T00:00:00Z",
			"lastSeen": "2999-01-01T00:00:00Z",
	        "logger": null,
	        "level": "info",
	        "status": "unresolved",
	        "statusDetails": {},
	        "isPublic": false,
	        "project": {
	            "name": "ACME",
	            "slug": "acme"
	        },
	        "type": "default",
			"metadata": {
	            "title": "This is a test message generated using `+"``raven test``"+` __main__ in <module>"
	        },
			"numComments": 0,
	        "assignedTo": null,
	        "isBookmarked": false,			
	        "isSubscribed": true,
	        "subscriptionDetails": null,
	        "hasSeen": false,			
	        "annotations": [],
	        "stats": {
	            "24h": [
	                [1487005200, 0],
	                [1487008800, 0],
	                [1487012400, 0],
	                [1487016000, 0],
	                [1487019600, 0],
	                [1487023200, 0],
	                [1487026800, 0],
	                [1487030400, 0],
	                [1487034000, 0],
	                [1487037600, 0],
	                [1487041200, 0],
	                [1487044800, 0],
	                [1487048400, 0],
	                [1487052000, 0],
	                [1487055600, 0],
	                [1487059200, 0],
	                [1487062800, 0],
	                [1487066400, 0],
	                [1487070000, 0],
	                [1487073600, 0],
	                [1487077200, 0],
	                [1487080800, 0],
	                [1487084400, 0],
	                [1487088000, 0]
	            ]
	        }
	    }
	]`, bodyStr)
}

// URL generated by JS http://localhost:3000/api/0/projects/acme-team/acme/issues/?query=is%3Aunresolved&limit=25&sort=date&statsPeriod=24h&shortIdLookup=1

/* OBSOLETE? EXPECTED RESPONSE
curl 'http://localhost:9000/api/0/projects/acme/api/issues/?limit=25&statsPeriod=24h&query=is%3Aunresolved+'
[
    {
        "timeSpent": null,
        "lastSeen": "2016-11-10T11:31:35Z",
        "numComments": 0,
        "userCount": 0,
        "stats": {
            "24h": []
        },
        "culprit": "/tmp/raven/bin/raven test http://571a1ad9bc9245329b22af2731db79d0:7910613d12ce478483eb9da048e45bed@localhost:9000/2",
        "title": "This is a test message generated using ``raven test``",
        "id": "1",
        "assignedTo": null,
        "logger": null,
        "annotations": [],
        "status": "unresolved",
        "isPublic": false,
        "hasSeen": false,
        "shareId": "322e31",
        "firstSeen": "2016-11-10T11:31:27Z",
        "count": "3",
        "permalink": "http://localhost:9000/acme/api/issues/1/",
        "level": "info",
        "isBookmarked": false,
        "project": {
            "name": "API",
            "slug": "api"
        },
        "statusDetails": {}
    }
]
*/
